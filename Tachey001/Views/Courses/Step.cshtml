@model Course
@section topCSS{
    @Styles.Render("~/Assets/css/step.css")
    <style>
        #chapter i {
            cursor: pointer;
        }

        #chapter i.fa-align-justify {
            cursor: grab;
        }
    </style>
}

@{
    ViewBag.Title = "Step";

    var titleText = new List<string>() { "課程標題", "課程目標", "預計單元", "募資條件", "詳細內容", "影片上傳", "課程網址", "開課身份", "準備募資" };

    var num = ViewBag.Id * 11;
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-7 my-5 d-flex justify-content-between p-0"
             id="step-progress">
            <div class="progress position-absolute bg-hahow-orange">
                <div class="progress-bar bg-hahow-green"
                     role="progressbar"
                     style="width:  @num%"
                     id="progress-bar"></div>
            </div>
            <a href="@Url.Action("Step", new { id = 0, CourseId = ViewBag.CourseId} )">
                <button type="button"
                        class="btn bg-hahow-green btn-circle"
                        title="開始">
                    0
                </button>
            </a>
            @for (int i = 1; i < 10; i++)
            {
                <a href="@Url.Action("Step", new { id = i, CourseId = ViewBag.CourseId} )">
                    @if (ViewBag.Id >= i)
                    {
                        <button type="button"
                                class="btn bg-hahow-green btn-circle"
                                title="@titleText[i-1]">
                            @i
                        </button>
                    }
                    else
                    {
                        <button type="button"
                                class="btn bg-hahow-orange btn-circle"
                                title="@titleText[i-1]">
                            @i
                        </button>
                    }
                </a>
            }
        </div>
    </div>
    <div class="row justify-content-center">
        <div class="col-12 text-center text-mc">
            <h1 id="titleContentH1">歡迎加入 Tachey 好老師的行列</h1>
        </div>
    </div>
    <div class="row justify-content-center m-2">
        <div class="col-12 text-center text-mc text-secondary">
            <h4 id="titleContentH4">跟著 Tachey 一步一步完成募資提案吧！</h4>
        </div>
    </div>
    <div class="row justify-content-center bg-white mb-5"
         id="contentHTML">
        @if (@ViewBag.Id == null)
        {
            @Html.Partial($"step/step_0", Model)
        }
        else
        {
            @Html.Partial($"step/step_{ViewBag.Id}", Model)
            @Scripts.Render("~/Assets/js/step.js")
        }
    </div>
</div>

@section endJS{
    <script src="https://cdn.ckeditor.com/ckeditor5/28.0.0/classic/ckeditor.js"></script>
    <script>
        ClassicEditor
            .create(document.querySelector('#editor'))
            .catch(error => {
                console.error(error);
            });
    </script>

    <script>
        function enableDragSort(listClass) {
            const sortableLists = document.getElementsByClassName(listClass);
            Array.prototype.map.call(sortableLists, (list) => { enableDragList(list) });
        }

        function enableDragList(list) {
            Array.prototype.map.call(list.children, (item) => { enableDragItem(item) });
        }

        function enableDragItem(item) {
            item.setAttribute('draggable', true)
            item.ondrag = handleDrag;
            item.ondragend = handleDrop;
        }

        function handleDrag(item) {
            const selectedItem = item.target,
                list = selectedItem.parentNode,
                x = event.clientX,
                y = event.clientY;

            selectedItem.classList.add('drag-sort-active');
            let swapItem = document.elementFromPoint(x, y) === null ? selectedItem : document.elementFromPoint(x, y);

            if (list === swapItem.parentNode) {
                swapItem = swapItem !== selectedItem.nextSibling ? swapItem : swapItem.nextSibling;
                list.insertBefore(selectedItem, swapItem);
            }
        }

        function handleDrop(item) {
            item.target.classList.remove('drag-sort-active');
            sortUpdate()
        }

        (() => { enableDragSort('drag-sort-enable') })();

        function newChapter() {
            var chapter = document.getElementById("chapter")
            var newDiv = document.createElement("div")
            var count = chapter.childElementCount

            newDiv.classList.add('col-11')
            newDiv.classList.add('border')
            newDiv.classList.add('my-1')
            newDiv.classList.add('py-2')
            newDiv.innerHTML = `
        <h4>
          <i class="fas fa-align-justify mr-2"></i>
          <span class="chapterName">章節${count + 1}</span>
          <input type="text"  class="w-75">
          <i class="far fa-window-close" onclick="deleteChapter()"></i>
        </h4>
        <hr>
        <h5 class="text-right">
          <span>-新增單元</span>
          <i class="far fa-plus-square" onclick="newUnit()"></i>
        </h5>
        <div class="drag-sort-enable unitBox">
          <h5 class="text-right">
            <i class="fas fa-align-justify mr-2"></i>
            <span>單元1</span>
            <input type="text" class="w-50">
            <i class="far fa-window-close mx-1" onclick="deleteUnit()"></i>
          </h5>
        </div>
      `

            chapter.appendChild(newDiv)
            enableDragSort('drag-sort-enable')
            sortUpdate()
        }

        function newUnit() {
            var unit = event.target.offsetParent.lastElementChild
            var count = unit.childElementCount

            var h5 = document.createElement('h5')
            h5.classList.add('text-right')
            h5.innerHTML = `
        <i class="fas fa-align-justify mr-2"></i>
        <span>單元${count + 1}</span>
        <input type="text" class="w-50">
        <i class="far fa-window-close mx-1" onclick="deleteUnit()"></i>
      `
            unit.appendChild(h5)
            enableDragSort('drag-sort-enable')
            sortUpdate()
        }

        function deleteChapter() {
            var chapter = document.getElementById("chapter")
            var target = event.target.offsetParent

            chapter.removeChild(target)
            sortUpdate()
        }

        function deleteUnit() {
            var unit = event.target.offsetParent.lastElementChild
            var target = event.target.parentElement

            unit.removeChild(target)
            sortUpdate()
        }

        function sortUpdate() {
            var chapterArr = document.querySelectorAll('.chapterName')
            var unitBox = document.querySelectorAll('.unitBox')

            chapterArr.forEach((item, index) => {
                item.innerText = `章節${index + 1}`
            })

            unitBox.forEach(x => {
                var unitArr = x.querySelectorAll('span')
                unitArr.forEach((item, index) => {
                    item.innerText = `單元${index + 1}`
                })
            })
        }
    </script>
}
